diff --git a/cmd/broker/fanout/main.go b/cmd/broker/fanout/main.go
index d0c160fd..3ecb58d1 100644
--- a/cmd/broker/fanout/main.go
+++ b/cmd/broker/fanout/main.go
@@ -20,6 +20,7 @@ import (
 	"context"
 	"time"
 
+	"cloud.google.com/go/profiler"
 	"cloud.google.com/go/pubsub"
 
 	"github.com/google/knative-gcp/pkg/broker/config/volume"
@@ -68,6 +69,15 @@ func main() {
 		logger.Fatalf("MAX_STALE_DURATION must be greater than pool resync period %v", poolResyncPeriod)
 	}
 
+	if err := profiler.Start(profiler.Config{
+		Service:        "broker-fanout",
+		ServiceVersion: "0.1",                  // change your version
+		ProjectID:      "{{.my-test-project}}", // optional on GCP
+		DebugLogging:   true,
+	}); err != nil {
+		logger.Fatalf("Cannot start the profiler", zap.Error(err))
+	}
+
 	// Give the signal channel some buffer so that reconciling handlers won't
 	// block the targets config update?
 	targetsUpdateCh := make(chan struct{})
diff --git a/cmd/broker/ingress/main.go b/cmd/broker/ingress/main.go
index 50101403..328320cb 100644
--- a/cmd/broker/ingress/main.go
+++ b/cmd/broker/ingress/main.go
@@ -17,6 +17,7 @@ limitations under the License.
 package main
 
 import (
+	"cloud.google.com/go/profiler"
 	metadataClient "github.com/google/knative-gcp/pkg/gclient/metadata"
 	"github.com/google/knative-gcp/pkg/metrics"
 	"github.com/google/knative-gcp/pkg/utils"
@@ -55,6 +56,16 @@ func main() {
 	if err != nil {
 		logger.Desugar().Fatal("Failed to create project id", zap.Error(err))
 	}
+
+	if err := profiler.Start(profiler.Config{
+		Service:        "broker-ingress",
+		ServiceVersion: "0.1",                  // change your version
+		ProjectID:      "{{.my-test-project}}", // optional on GCP
+		DebugLogging:   true,
+	}); err != nil {
+		logger.Fatalf("Cannot start the profiler", zap.Error(err))
+	}
+
 	logger.Desugar().Info("Starting ingress handler", zap.Any("envConfig", env), zap.Any("Project ID", projectID))
 
 	ingress, err := InitializeHandler(
diff --git a/cmd/broker/retry/main.go b/cmd/broker/retry/main.go
index 86c8e5d6..44cb70db 100644
--- a/cmd/broker/retry/main.go
+++ b/cmd/broker/retry/main.go
@@ -21,6 +21,7 @@ import (
 	"flag"
 	"time"
 
+	"cloud.google.com/go/profiler"
 	"cloud.google.com/go/pubsub"
 	"go.uber.org/zap"
 
@@ -74,6 +75,15 @@ func main() {
 		logger.Fatalf("MAX_STALE_DURATION must be greater than pool resync period %v", poolResyncPeriod)
 	}
 
+	if err := profiler.Start(profiler.Config{
+		Service:        "broker-retry",
+		ServiceVersion: "0.1",                  // change your version
+		ProjectID:      "{{.my-test-project}}", // optional on GCP
+		DebugLogging:   true,
+	}); err != nil {
+		logger.Fatalf("Cannot start the profiler", zap.Error(err))
+	}
+
 	// Give the signal channel some buffer so that reconciling handlers won't
 	// block the targets config update?
 	targetsUpdateCh := make(chan struct{})
